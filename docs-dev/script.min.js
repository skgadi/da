function syntaxHighlight(e){return e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),e.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,function(e){var t="number";return/^"/.test(e)?t=/:$/.test(e)?"key":"string":/true|false/.test(e)?t="boolean":/null/.test(e)&&(t="null"),'<span class="'+t+'">'+e+"</span>"})}const{createApp:createApp}=Vue,fullList={serial:{name:"Serial",description:"Serial port communication",commands:{list:{name:"List",description:"List all available serial ports",parameters:[]},open:{name:"Open",description:"Open a serial port",parameters:[{key:"port",name:"Port",description:"The name of the port to open",type:"text"},{key:"baud",name:"Baudrate",description:"The baudrate to use",type:"number"}]},close:{name:"Close",description:"Close a serial port",parameters:[{key:"port",name:"Port",description:"The name of the port to close",type:"text"}]},read:{name:"Read",description:"Read data from a serial port",parameters:[{key:"port",name:"Port",description:"The name of the port to open",type:"text"}]},write:{name:"Write",description:"Write data to a serial port",parameters:[{key:"port",name:"Port",description:"The name of the port to open",type:"text"},{key:"data",name:"Data",description:"The data to write",type:"text"}]},sRCbor:{name:"sRCbor",description:"Send receive data from a serial port in binary format",parameters:[{key:"port",name:"Port",description:"The name of the port to open",type:"text"},{key:"data",name:"Data",description:"The data to write",type:"text",encode:"json"}]},sR:{name:"sR",description:"Send receive data from a serial port in ASCII format",parameters:[{key:"port",name:"Port",description:"The name of the port to open",type:"text"},{key:"data",name:"Data",description:"The data to write",type:"text",encode:"json"}]}}},visa:{name:"VISA",description:"VISA (Virtual Instrument Software Architecture) communication",commands:{list:{name:"List",description:"List all available visa ports",parameters:[]},open:{name:"Open",description:"Open a visa port",parameters:[{key:"resource",name:"Resource",description:"The name of the port to open",type:"text"}]},close:{name:"Close",description:"Close a visa port",parameters:[{key:"resource",name:"Resource",description:"The name of the port to close",type:"text"}]},read:{name:"Read",description:"Read data from a visa port",parameters:[{key:"resource",name:"Resource",description:"The name of the port to open",type:"text"}]},write:{name:"Write",description:"Write data to a visa port",parameters:[{key:"resource",name:"Resource",description:"The name of the port to open",type:"text"},{key:"data",name:"Data",description:"The data to write",type:"text"}]},query:{name:"Query",description:"Query a visa port",parameters:[{key:"resource",name:"Resource",description:"The name of the port to open",type:"text"},{key:"data",name:"Data",description:"The data to write",type:"text"}]}}}};let vueApp=createApp({data:()=>({view:0,protocol:"serial",command:"list",parameters:{},fullList:fullList,websocket:null,recCode:"",enableSend:!1,codetoSend:{},prettySendCode:""}),watch:{parameters:{handler(e,t){this.composeCode()},deep:!0},command(){this.composeCode()},protocol(){this.composeCode()}},mounted(){this.composeCode()},methods:{connectIfNeeded(){this.enableSend||this.connectSocket()},connectSocket(){this.websocket=new WebSocket("ws://localhost:8765"),this.websocket.onopen=(()=>{this.enableSend=!0}),this.websocket.onmessage=(e=>{this.onReceiveCode(e.data)}),this.websocket.onclose=(()=>{this.enableSend=!1})},onReceiveCode(e){try{let t=JSON5.parse(e);this.recCode=syntaxHighlight(JSON.stringify(t,null,2))}catch(e){this.recCode="Error in received code: "+e}},sendCode(){this.codetoSend.id=Date.now(),this.enableSend&&(console.log(JSON5.stringify(this.codetoSend)),this.websocket.send(JSON.stringify(this.codetoSend)),this.recCode="Fecthing response...")},composeCode(){this.codetoSend={type:this.protocol,command:this.command};for(let e=0;e<this.fullList[this.protocol].commands[this.command].parameters.length;e++)if(key=this.fullList[this.protocol].commands[this.command].parameters[e].key,this.codetoSend[key]=this.parameters[key],"json"==this.fullList[this.protocol].commands[this.command].parameters[e].encode)try{console.log(this.codetoSend[key]),this.codetoSend[key]=JSON5.parse(this.codetoSend[key])}catch(e){}this.prettySendCode=syntaxHighlight(JSON.stringify(this.codetoSend,null,2))}}}).mount("#app");setInterval(function(){vueApp.connectIfNeeded()},1e3);